#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        up_: up_ {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_";
            bindings = <&kp UNDERSCORE>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        up_min: up_min {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_MIN";
            bindings = <&kp MINUS>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        up_slash: up_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_SLASH";
            bindings = <&kp SLASH>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        up_dot: up_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_DOT";
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        upcomma_en: upcomma_en {
            compatible = "zmk,behavior-mod-morph";
            label = "UPCOMMA_EN";
            bindings = <&commaspace_en>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        upcomma_ru: upcomma_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "UPCOMMA_RU";
            bindings = <&commspace_ru>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        kha {
            bindings = <&kp LBKT>;
            key-positions = <6 7>;
        };

        hrdsgn {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
        };

        TO_RU {
            bindings = <&KB_RU>;
            key-positions = <27 28>;
            layers = <0>;
        };

        TO_EN {
            bindings = <&KB_EN>;
            key-positions = <27 28>;
            layers = <1>;
        };

        yo {
            bindings = <&kp GRAVE>;
            key-positions = <2 3>;
        };

        Fn {
            bindings = <&sl 6>;
            key-positions = <26 27>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 15>;
            layers = <0 1>;
        };

        undr {
            bindings = <&kp UNDERSCORE>;
            key-positions = <14 13>;
            layers = <0 1>;
        };

        s_o {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
            layers = <0 1 7>;
        };

        s_c {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <17 18>;
            layers = <0 1 7>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <13 12>;
            layers = <0 1 7>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <11 12>;
            layers = <0 1 7>;
        };

        q_en {
            bindings = <&none>;
            key-positions = <6 16>;
            layers = <0 7>;
        };

        q_ru {
            bindings = <&kp AMPERSAND>;
            key-positions = <16 6>;
            layers = <1>;
        };

        exclam {
            bindings = <&kp EXCLAMATION>;
            key-positions = <13 3>;
            layers = <0 1 7>;
        };

        mlck {
            bindings = <&mkp LCLK>;
            key-positions = <33 34>;
        };

        mrck {
            bindings = <&mkp RCLK>;
            key-positions = <35 34>;
        };

        mrck2 {
            bindings = <&mkp RCLK>;
            key-positions = <23 13>;
        };

        mmck {
            bindings = <&mkp MCLK>;
            key-positions = <22 12>;
        };

        nord_Z {
            bindings = <&kp Z>;
            key-positions = <18 17 16>;
        };
    };

    macros {
        KB_EN: KB_EN {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LA(NUMBER_6))>,
                <&macro_wait_time 15>,
                <&to 0>,
                <&macro_wait_time 20>;

            label = "KB_EN";
        };

        KB_RU: KB_RU {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LA(N7))>,
                <&macro_wait_time 15>,
                <&to 1>,
                <&macro_wait_time 20>;

            label = "KB_RU";
        };

        commaspace_en: dotspace_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "DOTSPACE_EN";
        };

        commspace_ru: dotspace_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QUESTION &kp SPACE>;
            label = "DOTSPACE_RU";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &hml RIGHT_ALT J  &hml LA(LCTRL) Y  &hml LC(LA(LSHFT)) O  &hml LC(LSHFT) U  &up_min                                  &kp Q    &hmr LC(LSHIFT) G  &hmr LA(LC(LSHFT)) N  &hmr LA(LCTRL) F  &hmr RIGHT_ALT X
  &hml LGUI H       &hml LALT I       &hml LEFT_CONTROL E   &hml LSHFT A      &up_dot                                  &kp P    &hmr RSHIFT D      &hmr RCTRL R          &hmr LALT S       &hmr RGUI L
  &kp K             &kp SQT           &up_                  &upcomma_en       &up_slash                                &kp B    &kp C              &kp M                 &kp W             &kp V
                                                            &kp TAB           &key_repeat  &lt 2 SPACE    &lt 3 ENTER  &lt 8 T  &kp BACKSPACE
            >;
        };

        RU {
            bindings = <
  &hml RIGHT_ALT Q  &hml LA(LCTRL) W  &hml LS(LA(LCTRL)) E  &hml LC(LSHFT) R  &kp T                               &kp Y      &hmr LC(RSHFT) U  &hmr LS(LA(LCTRL)) I  &hmr LA(LCTRL) O  &hmr RIGHT_ALT P
  &hml LEFT_GUI A   &hml LALT S       &hml LCTRL D          &hml LSHFT F      &kp G                               &kp H      &hmr RSHFT J      &hmr RCTRL K          &hmr LALT L       &hmr LEFT_GUI SEMICOLON
  &kp Z             &kp X             &kp C                 &kp V             &kp B                               &kp N      &kp M             &kp COMMA             &kp DOT           &kp MINUS
                                                            &trans            &upcomma_ru  &trans    &lt 4 ENTER  &kp SLASH  &trans
            >;
        };

        nav {
            bindings = <
  &kp LS(DEL)  &kp LS(HOME)      &kp LS(UP)     &kp LS(END)      &kp DEL                        &kp PG_UP     &kp HOME         &kp UP         &kp END      &kp N0
  &kp LC(A)    &kp LS(LEFT)      &kp LS(DOWN)   &kp LS(RIGHT)    &kp ENTER                      &kp PG_DN     &kp LEFT         &kp DOWN       &kp RIGHT    &kp LC(END)
  &kp LC(Z)    &kp LS(LC(HOME))  &kp LC(MINUS)  &kp LS(LC(END))  &kp LC(PLUS)                   &kp LC(HOME)  &kt LC(PAGE_UP)  &kp LC(PG_DN)  &kp LC(END)  &none
                                                &trans           &trans        &trans    &mo 5  &kp ESCAPE    &kp DEL
            >;
        };

        sym {
            bindings = <
  &kp EXCLAMATION  &kp AT_SIGN    &kp HASH       &kp DOLLAR  &kp PERCENT                   &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
  &kp N1           &kp N2         &kp N3         &kp N4      &kp N5                        &kp N6        &kp N7         &kp N8        &kp N9                &kp N0
  &kp GRAVE        &kp LS(TILDE)  &kp LS(COLON)  &kp SEMI    &kp BSLH                      &kp LS(PIPE)  &kp LS(DQT)    &kp MINUS     &kp LS(DQT)           &kp LS(QMARK)
                                                 &trans      &kp ESCAPE   &mo 5    &trans  &trans        &trans
            >;
        };

        SYM_RU {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
                          &trans  &kp ESCAPE  &mo 5    &trans  &trans  &trans
            >;
        };

        adj {
            bindings = <
  &bootloader  &kp F1        &kp F2         &kp F3         &kp F4                     &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &kp LGUI     &hml LALT F5  &hml LSHFT F6  &hml LCTRL F7  &kp F8                     &out OUT_BLE  &hmr RCTRL C_VOL_DN  &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &trans       &kp F9        &kp F10        &kp F11        &kp F12                    &out OUT_USB  &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock
                                            &trans         &trans   &trans    &trans  &trans        &trans
            >;
        };

        fn_layer {
            bindings = <
  &trans            &trans        &trans         &trans          &kp CAPS                    &kp SCROLLLOCK  &trans         &trans         &trans        &trans
  &hml LEFT_GUI F1  &hml LALT F2  &hml LCTRL F3  &hml LSHIFT F4  &kp F5                      &kp F6          &hmr RSHFT F7  &hmr RCTRL F8  &hmr LALT F9  &hmr LGUI F10
  &trans            &trans        &trans         &trans          &kp F11                     &kp F12         &trans         &trans         &trans        &trans
                                                 &trans          &trans    &trans    &trans  &trans          &trans
            >;
        };

        focal {
            bindings = <
  &kp V  &kp L  &kp H  &kp G    &kp K                          &kp Q    &kp F     &kp O      &kp U    &kp J
  &kp S  &kp R  &kp N  &kp T    &kp B                          &kp Y    &kp C     &kp A      &kp E    &kp I
  &kp Z  &kp X  &kp M  &kp D    &kp P                          &kp SQT  &kp W     &kp COMMA  &kp DOT  &kp SLASH
                       &kp TAB  &to 0  &kp SPACE    &kp ENTER  &trans   &kp BSPC
            >;
        };

        khronkite {
            bindings = <
  &kp LA(LG(Q))  &kp LA(LG(O))  &kp LG(LS(K))  &kp LA(LG(R))  &kp LA(LG(T))                       &kp LG(F)               &kp LS(LA(F8))  &kp LS(LA(F9))  &kp LS(LA(F10))  &kp LS(LA(F11))
  &kp LA(LG(F))  &kp LS(LG(H))  &kp LS(LG(J))  &kp LS(LG(L))  &kp LA(LG(Y))                       &kp LS(LG(UP))          &kp LC(F1)      &kp LC(F2)      &kp LC(F3)       &kp LC(F4)
  &kp LG(M)      &kp LG(LC(K))  &kp LC(LG(H))  &kp LC(LG(L))  &kp LC(LG(J))                       &kp LS(LG(DOWN_ARROW))  &kp LG(M)       &kp LA(F3)      &kp LC(LG(A))    &kp LG(D)
                                               &kp LG(ENTER)  &kp LG(K)      &kp LG(J)    &trans  &trans                  &trans
            >;
        };
    };
};
