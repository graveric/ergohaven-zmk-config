#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        up_: up_ {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_";
            bindings = <&kp UNDERSCORE>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        up_min: up_min {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_MIN";
            bindings = <&kp MINUS>, <&kp LPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        up_slash: up_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_SLASH";
            bindings = <&kp SLASH>, <&kp ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        up_dot: up_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_DOT";
            bindings = <&kp PERIOD>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        upcomma_en: upcomma_en {
            compatible = "zmk,behavior-mod-morph";
            label = "UPCOMMA_EN";
            bindings = <&commaspace_en>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        upcomma_ru: upcomma_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "UPCOMMA_RU";
            bindings = <&commspace_ru>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        altcomma_en: altcomma_en {
            compatible = "zmk,behavior-mod-morph";
            label = "ALTCOMMA_EN";
            bindings = <&ctrl_comma_en>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        altcomma_ru: altcomma_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "ALTCOMMA_RU";
            bindings = <&ctrl_comma_ru>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        rep_nav: rep_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "REP_NAV";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            hold-while-undecided;
            flavor = "balanced";
            tapping-term-ms = <150>;
        };

        rucomma_nav: rucomma_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "RUCOMMA_NAV";
            bindings = <&mo>, <&altcomma_ru>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            hold-while-undecided;
        };

        alt_min: alt_min {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_MIN";
            bindings = <&ctrl_min>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        alt_slash: alt_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_SLASH";
            bindings = <&ctrl_slash>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        alt_: alt_ {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_";
            bindings = <&ctrl_>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        alt_dot_en: alt_dot_en {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_DOT_EN";
            bindings = <&ctrl_dot_en>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        ru_dot: ru_dot {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_DOT";
            bindings = <&kp SLASH>, <&kp DLLR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        alt_dot_ru: alt_dot_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_DOT_RU";
            bindings = <&ctrl_dot_ru>, <&ru_amprsnd>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        ctrl_min: ctrl_min {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_MIN";
            bindings = <&up_min>, <&kp RPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_comma_en: ctrl_comma_en {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_COMMA_EN";
            bindings = <&upcomma_en>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_dot_en: ctrl_dot_en {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_DOT_EN";
            bindings = <&up_dot>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_: ctrl_ {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_";
            bindings = <&up_>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_slash: ctrl_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_SLASH";
            bindings = <&up_slash>, <&kp BSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        up_inch: up_inch {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_INCH";
            bindings = <&kp DOUBLE_QUOTES>, <&kp SQT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ctrl_inch: ctrl_inch {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_INCH";
            bindings = <&up_inch>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        alt_inch: alt_inch {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_INCH";
            bindings = <&ctrl_inch>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        ctrl_comma_ru: ctrl_comma_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_COMMA_RU";
            bindings = <&upcomma_ru>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        up_dot_ru: up_dot_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_DOT_RU";
            bindings = <&ru_dot>, <&kp RU_SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ctrl_dot_ru: ctrl_dot_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_DOT_RU";
            bindings = <&up_dot_ru>, <&kp RU_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        up_slash_ru: up_slash_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_SLASH_RU";
            bindings = <&ru_slash>, <&kp ASTRK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ctrl_slash_ru: ctrl_slash_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_SLASH_RU";
            bindings = <&up_slash_ru>, <&ru_bkslsh>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        alt_slash_ru: alt_slash_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_SLASH_RU";
            bindings = <&ctrl_slash_ru>, <&ru_pipe>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        ru_up_: ru_up_ {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_UP_";
            bindings = <&kp UNDERSCORE>, <&ru_gt>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        ctrl_ru_: ctrl_ru_ {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_RU_";
            bindings = <&ru_up_>, <&ru_lt>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL)>;
        };

        alt_ru_: alt_ru_ {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_RU_";
            bindings = <&ctrl_ru_>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        ru_upinch: ru_upinch {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_UPINCH";
            bindings = <&kp AT_SIGN>, <&ru_apostrophe>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ctrl_ru_inch: ctrl_ru_inch {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_RU_INCH";
            bindings = <&ru_upinch>, <&ru_grave>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        alt_ru_inch: alt_ru_inch {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_RU_INCH";
            bindings = <&ctrl_ru_inch>, <&ru_dollar>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        kha {
            bindings = <&kp LBKT>;
            key-positions = <6 7>;
            layers = <0>;
        };

        hrdsgn {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
            layers = <0 1>;
        };

        TO_RU {
            bindings = <&KB_RU>;
            key-positions = <27 28>;
            layers = <0>;
        };

        TO_EN {
            bindings = <&KB_EN>;
            key-positions = <27 28>;
            layers = <1>;
        };

        yo {
            bindings = <&kp GRAVE>;
            key-positions = <2 3>;
        };

        Fn {
            bindings = <&sl 6>;
            key-positions = <26 27>;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <16 17>;
            layers = <0>;
        };

        undr {
            bindings = <&alt_ru_>;
            key-positions = <13 14>;
            layers = <1>;
        };

        rusinch {
            bindings = <&alt_ru_inch>;
            key-positions = <17 18>;
            layers = <1>;
        };

        mlck {
            bindings = <&mkp LCLK>;
            key-positions = <31 32>;
        };

        mrck {
            bindings = <&mkp RCLK>;
            key-positions = <30 31>;
        };

        mrck2 {
            bindings = <&mkp RCLK>;
            key-positions = <23 13>;
        };

        mmck {
            bindings = <&mkp MCLK>;
            key-positions = <22 12>;
        };

        en_lbr {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <16 6>;
            layers = <0>;
        };

        en_rbr {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <17 7>;
            layers = <0>;
        };

        ru_rbrc {
            bindings = <&ru_rbr>;
            key-positions = <17 7>;
            layers = <1>;
        };

        ru_lbrc {
            bindings = <&ru_lbr>;
            key-positions = <16 6>;
            layers = <1>;
        };

        ru_sch {
            bindings = <&kp W>;
            key-positions = <16 17>;
            layers = <1>;
        };

        ru_minus {
            bindings = <&alt_min>;
            key-positions = <3 4>;
            layers = <1>;
        };

        ru_sl {
            bindings = <&alt_slash_ru>;
            key-positions = <23 24>;
        };

        c_s {
            bindings = <&kp LC(S)>;
            key-positions = <13 12>;
            layers = <0 1>;
        };

        c_c {
            bindings = <&kp LC(C)>;
            key-positions = <13 3>;
            layers = <0 1>;
        };

        c_x {
            bindings = <&kp LC(X)>;
            key-positions = <14 4>;
            layers = <0 1>;
        };

        c_v {
            bindings = <&kp LC(V)>;
            key-positions = <12 2>;
        };

        f_shmn {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <6 7>;
            layers = <1>;
        };

        c_z {
            bindings = <&kp LC(Z)>;
            key-positions = <23 22>;
        };

        cs_z {
            bindings = <&kp LS(LC(Z))>;
            key-positions = <22 21>;
        };

        cbksp {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <33 34>;
            layers = <0 1>;
        };

        sdelete {
            bindings = <&kp LS(DEL)>;
            key-positions = <35 34>;
            layers = <1 0>;
        };
    };

    macros {
        KB_EN: KB_EN {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LA(NUMBER_6))>,
                <&macro_wait_time 15>,
                <&to 0>,
                <&macro_wait_time 20>;

            label = "KB_EN";
        };

        KB_RU: KB_RU {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LA(N7))>,
                <&macro_wait_time 15>,
                <&to 1>,
                <&macro_wait_time 20>;

            label = "KB_RU";
        };

        commaspace_en: dotspace_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "DOTSPACE_EN";
        };

        commspace_ru: dotspace_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QUESTION &kp SPACE>;
            label = "DOTSPACE_RU";
        };

        ru_dollar: ru_dollar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp DLLR>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_DOLLAR";
        };

        ru_hash: ru_hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp HASH>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_HASH";
        };

        ru_pipe: ru_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp PIPE>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_PIPE";
        };

        ru_tilda: ru_tilda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp TILDE>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_TILDA";
        };

        ru_grave: ru_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp GRAVE>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_GRAVE";
        };

        ru_emdash: ru_emdash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp LS(LC(U))>,
                <&macro_wait_time 10>,
                <&kp N2 &kp N0 &kp N1 &kp N4 &kp ENTER>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_EMDASH";
        };

        en_emdash: en_emdash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LS(LC(U))>,
                <&macro_wait_time 10>,
                <&kp N2 &kp N0 &kp N1 &kp N4 &kp ENTER>,
                <&macro_wait_time 10>;

            label = "EN_EMDASH";
        };

        ru_at: ru_at {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp AT_SIGN>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_AT";
        };

        en_rdq: en_rdq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LS(LC(U))>,
                <&macro_wait_time 10>,
                <&kp N0 &kp N0 &kp B &kp B &kp ENTER>,
                <&macro_wait_time 10>;

            label = "EN_RDQ";
        };

        ru_ldq: ru_ldq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp LS(LC(U))>,
                <&macro_wait_time 10>,
                <&kp N0 &kp N0 &kp A &kp B &kp ENTER>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_LDQ";
        };

        ru_rdq: ru_rdq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp LS(LC(U))>,
                <&macro_wait_time 10>,
                <&kp N0 &kp N0 &kp B &kp B &kp ENTER>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_RDQ";
        };

        en_ldq: en_ldq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LS(LC(U))>,
                <&macro_wait_time 10>,
                <&kp N0 &kp N0 &kp A &kp B &kp ENTER>,
                <&macro_wait_time 10>;

            label = "EN_LDQ";
        };

        ru_lbr: ru_lbr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp LEFT_BRACE>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_LBR";
        };

        ru_rbr: ru_rbr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp RIGHT_BRACE>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_RBR";
        };

        ru_lt: ru_lt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp LESS_THAN>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_LT";
        };

        ru_gt: ru_gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp GREATER_THAN>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_GT";
        };

        en_endash: en_endash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LS(LC(U))>,
                <&macro_wait_time 10>,
                <&kp NUMBER_2 &kp NUMBER_0 &kp N1 &kp NUMBER_3 &kp ENTER>,
                <&macro_wait_time 10>;

            label = "EN_ENDASH";
        };

        ru_endash: ru_endash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp LS(LC(U))>,
                <&macro_wait_time 10>,
                <&kp NUMBER_2 &kp NUMBER_0 &kp N1 &kp NUMBER_3 &kp ENTER>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_ENDASH";
        };

        en_number: en_number {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_RU>,
                <&macro_wait_time 10>,
                <&kp LS(NUMBER_3)>,
                <&macro_wait_time 10>,
                <&KB_EN>;

            label = "EN_NUMBER";
        };

        ru_caret: ru_krs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp CARET>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_KRS";
        };

        ru_apostrophe: ru_up_inch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp SQT>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_UP_INCH";
        };

        ru_amprsnd: ru_amprsnd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp AMPERSAND>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_AMPRSND";
        };

        ru_slash: ru_slash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp FSLH>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_SLASH";
        };

        ru_bkslsh: ru_backslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&KB_EN>,
                <&macro_wait_time 10>,
                <&kp BACKSLASH>,
                <&macro_wait_time 10>,
                <&KB_RU>;

            label = "RU_BACKSLASH";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &hml RIGHT_ALT J  &hml LA(LCTRL) Y  &hml LC(LA(LSHFT)) A  &hml LC(LSHFT) U  &alt_min                               &kp W    &hmr LC(LSHIFT) G  &hmr LA(LC(LSHFT)) N  &hmr LA(LCTRL) F  &hmr RIGHT_ALT X
  &hml LGUI K       &hml LALT I       &hml LEFT_CONTROL O   &hml LSHFT E      &alt_dot_en                            &kp P    &hmr RSHIFT D      &hmr RCTRL R          &hmr LALT S       &hmr RGUI H
  &lt 8 Q           &alt_inch         &alt_                 &altcomma_en      &alt_slash                             &kp B    &kp C              &kp L                 &kp M             &kp V
                                                            &key_repeat       &lt 2 SPACE  &kp TAB    &kp BACKSPACE  &lt 3 T  &key_repeat
            >;
        };

        RU {
            bindings = <
  &hml RIGHT_ALT A  &hml LA(LCTRL) E  &hml LS(LA(LCTRL)) F  &hml LC(LSHFT) Z  &kp DOT                               &kp I    &hmr LC(RSHFT) V  &hmr LS(LA(LCTRL)) Y  &hmr LA(LCTRL) R  &hmr RIGHT_ALT P
  &hml LEFT_GUI Q   &hml LALT B       &hml LCTRL J          &hml LSHFT T      &alt_dot_ru                           &kp U    &hmr RSHFT N      &hmr RCTRL H          &hmr LALT D       &hmr LEFT_GUI X
  &kp SEMI          &kp S             &kp M                 &altcomma_ru      &kp SQT                               &kp O    &kp L             &kp K                 &kp G             &kp COMMA
                                                            &trans            &lt 2 SPACE  &trans    &kp BACKSPACE  &lt 4 C  &trans
            >;

            display-name = "Base";
        };

        nav {
            bindings = <
  &kp LS(DEL)  &kp LS(HOME)      &kp LS(UP)     &kp LS(END)      &kp DEL                            &kp PG_UP     &kp HOME         &kp UP         &kp END      &kp N0
  &kp LC(A)    &kp LS(LEFT)      &kp LS(DOWN)   &kp LS(RIGHT)    &kp ENTER                          &kp PG_DN     &kp LEFT         &kp DOWN       &kp RIGHT    &kp LC(END)
  &mo 9        &kp LS(LC(HOME))  &kp LC(MINUS)  &kp LS(LC(END))  &kp LC(PLUS)                       &kp LC(HOME)  &kt LC(PAGE_UP)  &kp LC(PG_DN)  &kp LC(END)  &none
                                                &trans           &trans        &trans    &lt 7 ESC  &lt 5 ENTER   &kp DEL
            >;

            display-name = "Navigation";
        };

        sym {
            bindings = <
  &en_number           &hml LC(LEFT_ALT) N9    &hml LS(LA(LCTRL)) N8  &hml LS(LCTRL) N7   &kp PERCENT                     &kp CARET   &hmr LS(LCTRL) F3  &hmr LS(LA(LCTRL)) F4  &hmr LC(LEFT_ALT) F9  &kp F10
  &hml LEFT_GUI MINUS  &hml LEFT_ALT NUMBER_3  &hml LCTRL NUMBER_2    &hml LEFT_SHIFT N1  &kp HASH                        &en_emdash  &hmr LSHFT F2      &hmr LCTRL F5          &hmr LEFT_ALT F8      &hmr LEFT_GUI F11
  &kp TILDE            &kp N6                  &kp NUMBER_5           &kp NUMBER_4        &kp AT_SIGN                     &en_endash  &kp F1             &kp F6                 &kp F7                &kp F12
                                                                      &en_rdq             &lt 5 N0     &en_ldq    &trans  &trans      &trans
            >;
        };

        SYM_RU {
            bindings = <
  &kp LS(NUMBER_3)     &hml LC(LEFT_ALT) N9    &hml LA(LC(LEFT_SHIFT)) N8  &hml LS(LCTRL) N7   &kp LS(PRCNT)                     &ru_caret   &hmr LS(LCTRL) F3    &hmr LS(LA(LCTRL)) F4  &hmr LC(LEFT_ALT) F9  &kp F10
  &hml LEFT_GUI MINUS  &hml LEFT_ALT NUMBER_3  &hml LCTRL NUMBER_2         &hml LEFT_SHIFT N1  &ru_hash                          &ru_endash  &hmr RIGHT_SHIFT F2  &hmr LCTRL F5          &hmr LEFT_ALT F8      &hmr LEFT_GUI F11
  &ru_tilda            &kp N6                  &kp NUMBER_5                &kp NUMBER_4        &ru_at                            &ru_emdash  &kp F1               &kp F6                 &kp F7                &kp F12
                                                                           &ru_rdq             &lt 5 N0       &ru_ldq    &trans  &trans      &trans
            >;

            display-name = "Symbols";
        };

        adj {
            bindings = <
  &bootloader  &kp F1        &kp F2         &kp F3         &kp F4                     &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &kp LGUI     &hml LALT F5  &hml LSHFT F6  &hml LCTRL F7  &kp F8                     &out OUT_BLE  &hmr RCTRL C_VOL_DN  &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &trans       &kp F9        &kp F10        &kp F11        &kp F12                    &out OUT_USB  &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock
                                            &trans         &trans   &trans    &trans  &trans        &trans
            >;

            display-name = "Adjust";
        };

        fn_layer {
            bindings = <
  &trans            &trans        &trans         &trans          &kp CAPS                    &kp SCROLLLOCK  &trans         &trans         &trans        &trans
  &hml LEFT_GUI F1  &hml LALT F2  &hml LCTRL F3  &hml LSHIFT F4  &kp F5                      &kp F6          &hmr RSHFT F7  &hmr RCTRL F8  &hmr LALT F9  &hmr LGUI F10
  &trans            &trans        &trans         &trans          &kp F11                     &kp F12         &trans         &trans         &trans        &trans
                                                 &trans          &trans    &trans    &trans  &trans          &trans
            >;
        };

        khronkite {
            bindings = <
  &kp LA(LG(Q))  &kp LA(LG(O))  &kp LG(LS(K))  &kp LA(LG(R))  &kp LA(LG(T))                       &kp LG(F)               &kp LS(LA(F8))  &kp LS(LA(F9))  &kp LS(LA(F10))  &kp LS(LA(F11))
  &kp LA(LG(F))  &kp LS(LG(H))  &kp LS(LG(J))  &kp LS(LG(L))  &kp LA(LG(Y))                       &kp LS(LG(UP))          &kp LC(F1)      &kp LC(F2)      &kp LC(F3)       &kp LC(F4)
  &kp LG(M)      &kp LG(LC(K))  &kp LC(LG(H))  &kp LC(LG(L))  &kp LC(LG(J))                       &kp LS(LG(DOWN_ARROW))  &kp LG(M)       &kp LA(F3)      &kp LC(LG(A))    &kp LG(D)
                                               &kp LG(ENTER)  &kp LG(K)      &kp LG(J)    &trans  &trans                  &trans
            >;
        };

        shortcuts {
            bindings = <
  &trans  &kp LC(Q)  &kp LS(LC(I))  &kp LS(LC(R))  &kp LC(T)                              &kp LC(MINUS)  &kp LC(D)  &kp LC(N)          &kp LS(LC(M))  &kp LC(RU_MINUS)
  &trans  &kp LC(L)  &kp LC(S)      &kp LC(A)      &kp LC(F)                              &kp LC(EQUAL)  &kp LC(P)  &kp LS(LA(LC(E)))  &kp LC(O)      &kp LC(PLUS)
  &trans  &kp LALT   &kp LC(G)      &kp LC(R)      &kp LC(H)                              &kp LC(B)      &kp LC(I)  &kp LC(U)          &kp LS(LC(X))  &kp LSHFT
                                    &kp LC(X)      &kp LC(C)  &kp LC(V)    &kp LS(LC(Z))  &kp LC(Z)      &kp LC(W)
            >;
        };

        mouse {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &msc SCRL_UP    &mkp MB1        &mmv MOVE_UP    &mkp MB2         &trans
  &trans  &trans  &trans  &trans  &trans                    &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
  &mo 9   &trans  &trans  &trans  &trans                    &trans          &msc SCRL_LEFT  &mkp MB3        &msc SCRL_RIGHT  &trans
                          &trans  &trans  &trans    &trans  &trans          &trans
            >;
        };
    };
};
